substitutions:
  # change device name to match your desired name
  device_name: "face-recognition"
  # change sensor name below to the one you want to see in Home Assistant
  device_name_pretty: Face Recognition
  # UART TX Pin
  uart_tx_pin: "23" # Change to the TX pin you want to use
  # UART RX Pin
  uart_rx_pin: "19" # Change to the TX pin you want to use

esphome:
  name: $device_name
  includes:
    - FaceRec_TX510.h
  # Change the following to match your ESP board
  platform: ESP32
  board: wemos_d1_mini32
    
# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_update

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "FaceRec Fallback Hotspot"
    password: !secret fallback_pass

captive_portal:

# Enable logging
logger:
  logs:
    sensor: INFO # reduced logging to minimize web_server target overload..

# Enable Webserver
web_server:
  port: 80
  version: 2
  include_internal: true

http_request:
  useragent: esphome/$device_name
  timeout: 2s
  
uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200
#  debug:
#    direction: BOTH
#    dummy_receiver: false # enabling this, prevents UART byte read in main program, use only for debugging of raw frames and pin assignments
#    sequence:
#      - lambda: UARTDebug::log_hex(direction, bytes, ',');

button:
  - platform: template
    name: "Start Identify: ${device_name_pretty}" # Button to start the identification process
    id: identify
    entity_category: config
    on_press:
      - lambda: id(display_template).publish_state(true);
      - uart.write: [0xEF, 0xAA, 0x12, 0x00, 0x00, 0x00, 0x00, 0x12]
  - platform: template
    name: "Register User: ${device_name_pretty}" # Button to register the user currently facing the camera
    id: registration
    entity_category: config
    on_press:
      - lambda: id(display_template).publish_state(true);
      - uart.write: [0xEF, 0xAA, 0x13, 0x00, 0x00, 0x00, 0x00, 0x13]
  - platform: template
    name: "Delete UserID: ${device_name_pretty}" # Button to clear the UserID from the ha entity declared in ESPHome id:'user_input'
    id: delete_fuserid
    entity_category: config
    on_press:
      then:
        - uart.write:
            id: uart_bus 
            data: !lambda
                    float state_value = id(user_input).state;
                    uint16_t value = static_cast<uint16_t>(state_value);
                    uint8_t highByte = static_cast<uint8_t>(value >> 8);
                    uint8_t lowByte = static_cast<uint8_t>(value & 0xFF);
                    uint8_t checksum = 0x22 + highByte + lowByte;
                    Serial.println("low value:");
                    Serial.println(lowByte, HEX);
                    Serial.println("high value:");
                    Serial.println(highByte, HEX);
                    std::vector<uint8_t> data = {0xEF, 0xAA, 0x20, 0x00, 0x00, 0x00, 0x02, highByte, lowByte, checksum};
                    return data;
  - platform: template
    name: "Clear ALL Users: ${device_name_pretty}" # Button to clear all the registered faces
    id: clear_all
    entity_category: config
    on_press:
      - uart.write: [0xEF, 0xAA, 0x21, 0x00, 0x00, 0x00, 0x00, 0x21]
  - platform: template
    name: "Query Num. Reg. UserIDs: ${device_name_pretty}" # Button to query the number of registered faces
    id: query_num
    entity_category: config
    on_press:
      - uart.write: [0xEF, 0xAA, 0xC4, 0x00, 0x00, 0x00, 0x00, 0xC4]
  - platform: template
    name: "Change Baudrate: ${device_name_pretty}" # Button to change the Baurate from the ha entity declared in ESPHome id:'user_input'
    id: baudrate_change
    entity_category: config
    on_press:
      then:
        - uart.write:
            id: uart_bus 
            data: !lambda
                    float state_value = id(user_input).state;
                    uint8_t value_byte = static_cast<uint8_t>(state_value);
                    uint8_t checksum = 0x52 + value_byte;
                    std::vector<uint8_t> data = {0xEF, 0xAA, 0x51, 0x00, 0x00, 0x00, 0x01, value_byte, checksum};
                    Serial.println("value_byte:");
                    Serial.println(value_byte, HEX);
                    return data;
  # Values for Baudrate:
  # 0 = 9600
  # 1 = 19200
  # 2 = 38400
  # 3 = 57600
  # 4 = 115200
  - platform: restart
    name: "Restart MCU: ${device_name_pretty}" # Button to restart your ESP
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"
  - platform: template
    name: "Reboot TX510 Module: ${device_name_pretty}"  # Button to reboot the TX510
    id: reboot_module
    entity_category: diagnostic
    on_press:
      - uart.write: [0xEF, 0xAA, 0xC3, 0x00, 0x00, 0x00, 0x00, 0xC3]
  - platform: template
    name: "Query TX510 Version: ${device_name_pretty}" # Button to query the TX510 version
    id: query_version
    entity_category: diagnostic
    on_press:
      - uart.write: [0xEF, 0xAA, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30]

switch:
  - platform: template
    name: "${device_name_pretty} Display" # Switch for the Display (Controls also the backlight)
    id: display_template
    restore_mode: "RESTORE_DEFAULT_OFF"
    optimistic: true
    restore_state: true
    on_turn_on:
      then:
        - lambda: id(back_light_template).publish_state(true);
        - uart.write:
            id: uart_bus
            data: [0xEF, 0xAA, 0xC1, 0x00, 0x00, 0x00, 0x01, 0x01, 0xC3]
    on_turn_off:
      then:
        - lambda: id(back_light_template).publish_state(false);
        - uart.write:
            id: uart_bus
            data: [0xEF, 0xAA, 0xC1, 0x00, 0x00, 0x00, 0x01, 0x00, 0xC2]
  - platform: template
    name: "${device_name_pretty} BackLight" # Switch for the backlight
    id: back_light_template
    restore_mode: "RESTORE_DEFAULT_OFF"
    optimistic: true
    restore_state: true
    on_turn_on:
      - uart.write:
          id: uart_bus
          data: [0xEF, 0xAA, 0xC0, 0x00, 0x00, 0x00, 0x01, 0x01, 0xC2]
    on_turn_off:
      - uart.write:
          id: uart_bus
          data: [0xEF, 0xAA, 0xC0, 0x00, 0x00, 0x00, 0x01, 0x00, 0xC1]
  - platform: template
    name: "${device_name_pretty} Flash" # Switch for the on board Led Flash
    id: flash_template
    restore_mode: "RESTORE_DEFAULT_OFF"
    optimistic: true
    restore_state: true
    on_turn_on:
      - uart.write:
          id: uart_bus
          data: [0xEF, 0xAA, 0xC2, 0x00, 0x00, 0x00, 0x01, 0x01, 0xC4]
    on_turn_off:
      - uart.write:
          id: uart_bus
          data: [0xEF, 0xAA, 0xC2, 0x00, 0x00, 0x00, 0x01, 0x00, 0xC3]

binary_sensor:
  - platform: template
    id: presence_template
    name: "${device_name_pretty} Presence"  # This should indicate if someone is recognised (true) or not (false)
    device_class: presence

text_sensor:
  - platform: custom
    lambda: |-
      auto my_text_sensor = new UARTSensor(id(uart_bus)); 
      App.register_component(my_text_sensor);
      return {my_text_sensor->text_userid, my_text_sensor->text_reply, my_text_sensor->presence_sensor};
    text_sensors:
      - id: text_userid
        name: "internal_text_userid_to_text_template"
        internal: true
        on_value:
           then:
              - text_sensor.template.publish:
                  id: user_id_template
                  state: !lambda return x;
      - id: text_reply
        name: "internal_text_reply_to_text_template"
        internal: true
        on_value:
           then:
              - text_sensor.template.publish:
                  id: reply_template
                  state: !lambda return x;
      - id: presence_sensor
        name: "internal_presense_sensor_to_binary_template"
        internal: true
        on_value:
          - binary_sensor.template.publish:
             id: presence_template
             state: !lambda return x == "on";
  - platform: template
    id: user_id_template
    name: "${device_name_pretty} User ID" # Returns the User ID from the recognised face, note the first face will have the ID 0, so it matches the responce in the display
  - platform: template
    id: reply_template
    name: "${device_name_pretty} Responce"

number:
  - platform: template
    name: "${device_name_pretty} User Input"
    id: user_input
    optimistic: true
    min_value: 0
    max_value: 999
    step: 1
    restore_value: true
